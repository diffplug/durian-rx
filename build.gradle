plugins {
	id "com.diffplug.blowdryer"
	id "com.github.ben-manes.versions"
	id "com.diffplug.gradle.osgi.bndmanifest"
	id "com.diffplug.gradle.spotless"
	id "com.jfrog.bintray"
	id "com.github.spotbugs" version '3.0.0'
}

apply plugin: 'java-library'
apply from: 干.file('base/java8.gradle')
apply from: 干.file('base/osgi.gradle')
dependencies {
	implementation "com.diffplug.durian:durian-core:${VER_DURIAN}"
	implementation "com.diffplug.durian:durian-collect:${VER_DURIAN}"
	implementation "com.diffplug.durian:durian-concurrent:${VER_DURIAN}"
	api "io.reactivex.rxjava2:rxjava:${VER_RXJAVA}"
	testImplementation "junit:junit:${VER_JUNIT}"
	testImplementation "com.diffplug.durian:durian-testlib:${VER_DURIAN}"
	testImplementation "com.diffplug.durian:durian-debug:${VER_DURIAN_DEBUG}"
}

////////////
// FORMAT //
////////////
group='com.diffplug.durian'	// https://discuss.gradle.org/t/separation-between-gradle-classpath-and-the-compiled-classpath/19042/6
spotless {
	java {
		licenseHeaderFile		'gradle/spotless.license.java'		// License header file
		importOrderFile			'gradle/spotless.importorder'		// An import ordering file, exported from Eclipse
		eclipse().configFile	'gradle/spotless.eclipseformat.xml'	// XML file dumped out by the Eclipse formatter
	}
	format 'misc', {
		target '*.gitignore', '*.gradle', '*.md', '.ci/*.sh'
		indentWithTabs()
		trimTrailingWhitespace()
		endWithNewline()
	}
	freshmark {
		target '*.md'
		propertiesFile('gradle.properties')
		properties {
			it.put('group', group)
		}
	}
}

//////////////
// FINDBUGS //
//////////////
spotbugs {
	sourceSets = [sourceSets.main]	// don't check the test code
	ignoreFailures = false 	// bug free or it doesn't ship!
	reportsDir = file('build/findbugs')
	effort = 'max'			// min|default|max
	reportLevel = 'low'		// low|medium|high (low = sensitive to even minor mistakes)
	omitVisitors = []		// bugs that we want to ignore
}
// HTML instead of XML
tasks.withType(com.github.spotbugs.SpotBugsTask) {
	reports {
		xml.enabled = false
		html.enabled = true
	}
}
// we'll want the findbugs annotations (they don't have a 3.0.1 version)
dependencies {
	compileOnly 'com.google.code.findbugs:annotations:3.0.0'
	compileOnly 'com.google.code.findbugs:jsr305:3.0.0'
}
configurations {
	testImplementation.extendsFrom compileOnly
}

///////////
// MAVEN //
///////////
apply plugin: 'maven-publish'

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allJava
}

def verSnapshot = { it.endsWith('-SNAPSHOT') ? 'snapshot' : it }
// Where it's possible to name parameters and methods clearly enough
// that javadoc is not necessary, why make the code bigger?
//
// Thus, no javadoc warnings.
def makeLink = { url, text -> "<a href=\"${url}\" style=\"text-transform: none;\">${text}</a>" }
def javadocInfo = '<h2>' + makeLink("https://github.com/${org}/${name}", "${group}:${name}:${version}") +
' by ' + makeLink('http://www.diffplug.com', 'DiffPlug') + '</h2>'
javadoc {
	options.addStringOption('Xdoclint:none', '-quiet')
	options.header javadocInfo
	options.footer javadocInfo
	options.links('https://javadoc.io/doc/com.diffplug.durian/durian-core/' + verSnapshot(VER_DURIAN) + '/')
	options.links('https://javadoc.io/doc/com.diffplug.durian/durian-collect/' + verSnapshot(VER_DURIAN) + '/')
	options.links('https://javadoc.io/doc/com.diffplug.durian/durian-concurrent/' + verSnapshot(VER_DURIAN) + '/')
	options.links('https://javadoc.io/doc/com.diffplug.durian/durian-debug/' + verSnapshot(VER_DURIAN_DEBUG) + '/')
	options.links('https://docs.oracle.com/javase/8/docs/api/')
	options.links('http://reactivex.io/RxJava/javadoc/')
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}
